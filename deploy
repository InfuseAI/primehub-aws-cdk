#! /bin/bash
set -eo pipefail

NAME=
DRY_MODE=false
PRIMEHUB_MODE=ee
K8S_INFRA_ONLY=false
AWS_ACCOUNT=${AWS_ACCOUNT:-}
AWS_REGION=${AWS_REGION:-}
AWS_ZONE=${AWS_ZONE:-a}
CPU_INSTANCE='t3a'
GPU_INSTANCE='g4dn'


info() {
  echo -e "\033[0;32m$1\033[0m"
}

warn() {
  echo -e "\033[0;93m$1\033[0m"
}

error() {
  echo -e "\033[0;91m$1\033[0m" >&2
}

usage() {
  local SELF=`basename $0`
  cat <<EOF
Usage: $SELF [options] <ClusterName>

Options:
  --mode                      : Set the PrimeHub mode ( Default: ${PRIMEHUB_MODE}, Support: ee, ce, deploy )
  --region                    : Set the AWS region ( Default: ${AWS_REGION} )
  --zone                      : Set the AWS availability zones ( Default: ${AWS_ZONE} )
  --dry-run                   : Dry run AWS CDK deploy
  --domain   <base domain>    : Provide the base domain managed by AWS Route 53
  --cpuInstanceType           : Set the EKS default CPU instance type ( Default: ${CPU_INSTANCE} )
  --gpuInstanceType           : Set the EKS default GPU instance type ( Default: ${GPU_INSTANCE} )
  -h, --help                  : Show this message
EOF
}

node::version() {
  info "[Node] Version"
  node -v
}

node::packages() {
  info "\n[Fetch] Packages"
  yarn install
  echo ""
}

cdk::context() {
  if aws sts get-caller-identity | grep "Arn" | grep "assumed-role"; then
    export USERNAME=$(aws sts get-caller-identity  | grep "Arn" | sed 's/.*:assumed-role\/\(.*\)\/.*/\1/')
  else
    export USERNAME=$(aws iam get-user | jq ".User.UserName" | sed -e 's/"//g')
  fi
  export NAME=${NAME:-'cdk'}
  export AWS_ACCOUNT=$(aws sts get-caller-identity | grep "Account" | sed 's/.*Account": "\(.*\)",/\1/')

  if [ ! -f "./cdk.context.json" ] || ! (cat ./cdk.context.json | grep '"clusterType": "dev-eks"' > /dev/null ); then
    info "[Create] CDK context"
    AWS_BASED_DOMAIN=${AWS_BASED_DOMAIN:-''}
    PH_PASSWORD=$(openssl rand -hex 16)
    KC_PASSWORD=$(openssl rand -hex 16)
    ADMIN_UI_GRAPHQL_SECRET_KEY=$(openssl rand -hex 32)
    HUB_PROXY_SECRET_TOKEN=$(openssl rand -hex 32)

    cdk context \
      -c clusterType=dev-eks \
      -c username=$USERNAME \
      -c name=$NAME \
      -c region=$AWS_REGION \
      -c zone=$AWS_ZONE \
      -c cpuInstance=$CPU_INSTANCE \
      -c gpuInstance=$GPU_INSTANCE \
      -c basedDomain=$AWS_BASED_DOMAIN \
      -c primehubMode=$PRIMEHUB_MODE \
      -c primehubPassword=$PH_PASSWORD \
      -c keycloakPassword=$KC_PASSWORD \
      -c GraphqlSecretKey=$ADMIN_UI_GRAPHQL_SECRET_KEY \
      -c HubProxySecretKey=$HUB_PROXY_SECRET_TOKEN \
      -c k8sInfraOnly=$K8S_INFRA_ONLY \
      --json --strict > cdk.context.tmp
      mv cdk.context.tmp cdk.context.json
      cdk context
  else
    info "[Found] CDK context"
    cdk context
  fi
}

cdk::deploy() {
  info "[Bootstrap] aws://${AWS_ACCOUNT}/${AWS_REGION}"
  cdk bootstrap aws://${AWS_ACCOUNT}/${AWS_REGION}

  info "[Deploy] eks-$NAME by $USERNAME"
  cdk deploy
}

cdk::dry() {
  info "[Dry Run] eks-$NAME by $USERNAME"
  cdk synth > cdk.cloudformation.out
  info "[Output] Please check the output from 'cdk.cloudformation.out'"
}

args::parse() {
  while (( "$#" )); do
    case "${1:-}" in
      --mode)
        shift
        if [[ "${1}" != 'ee' && "${1}" != 'ce' && "${1}" != 'deploy' ]]; then
          error "[Not Support] PrimeHub Mode '${1}' not support"
          usage
          exit 2
        fi
        PRIMEHUB_MODE=${1}
        ;;
      --region)
        shift
        AWS_REGION=${1}
      ;;
      --zone)
        shift
        AWS_ZONE=${1}
      ;;
      --cpuInstanceType)
        shift
        CPU_INSTANCE=${1}
      ;;
      --gpuInstanceType)
        shift
        GPU_INSTANCE=${1}
      ;;
      --dry-run)
        DRY_MODE=true
      ;;
      --domain)
        shift
        AWS_BASED_DOMAIN=${1}
      ;;
      --k8s-infra)
        K8S_INFRA_ONLY=true
      ;;
      -h|--help)
        usage
        exit 0
      ;;
      --debug)
        set -x
      ;;
      *)
        if [ "${NAME}" == "" ]; then
          NAME=$1
        else
          error "[Syntax error] Should only provide one cluster name"
          usage
          exit 1
        fi
      ;;
    esac
    shift || (usage; exit 1)
  done
}

main() {
  args::parse "$@"
  node::version
  node::packages
  cdk::context "$@"
  if [ "${DRY_MODE}" == "true" ]; then
    cdk::dry
  else
    cdk::deploy
  fi
}

main "$@"
